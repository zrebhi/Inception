version: ‘3’
services:
  mariadb:
    container_name: mariadb            # Le nom du container, oui vraiment.
    networks:
      - inception                        # à quel network il appartient
    build:
      context: requirements/mariadb    # ou se trouve son Dockerfile
      dockerfile: Dockerfile            # le nom du Dockerfile ?!
      args:
        SQL_DATABASE: $SQL_DATABASE
        SQL_USER: $SQL_USER
        SQL_PASSWORD: $SQL_PASSWORD
        SQL_ROOT_PASSWORD: $SQL_ROOT_PASSWORD
    env_file: .env                  # le fichier d'environnement pour transmettre les variables
    volumes: # Voir plus bas
      - mariadb:/var/lib/mysql
    restart: unless-stopped         # redémarre tant qu'il n'est pas stoppé
    expose: # le port à exposer
      - "3306"

  nginx:
    container_name: nginx
    volumes:
      - wordpress:/var/www/wordpress
    networks:
      - inception
    depends_on: # Nouvelle ligne, indiquant de ne pas démarrer NGINX tant que WordPress n'a pas démarré.
      - wordpress
    build:
      context: requirements/nginx
      dockerfile: Dockerfile
      args:
        WP_PATH: $WP_PATH
        WP_URL: $WP_URL
    env_file: .env
    ports:
      - "443:443"        # on indique le port qui sera exposé a la machine locale
    restart: on-failure  # Ici nous changeons, le container redémarrera uniquement en cas de crash.

  wordpress:
    container_name: wordpress
    env_file: .env
    volumes:
      - 'wordpress:/var/www/wordpress'
    networks:
      - inception
    build:
      context: requirements/wordpress
      dockerfile: Dockerfile
    depends_on: # WordPress démarrera uniquement après MariaDB (sinon il ne pourra pas configurer la base de données...)
      - mariadb
    restart: on-failure
    expose:
      - "9000"

volumes:
  wordpress:
    driver: local # ici nous stocqkons le volume en local
    driver_opts:
      type: 'none' # aucun type spécifique
      o: 'bind'
      device: '${WORDPRESS_VOLUME_PATH}' #Ou stocker le dossier sur votre ordinateur en local
  mariadb:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind' # Les Bind Mounts sont des volumes qui se montent sur un chemin d'accès à l'hôte, et ils peuvent être modifiés par d'autres processus en dehors de docker.
      device: '$MARIADB_VOLUME_PATH' #Ou stocker le dossier sur votre ordinateur en local

networks:
  inception:
    driver: bridge